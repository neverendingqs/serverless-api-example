service: serverless-api-example

frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  region: ${env:AWS_REGION, 'ca-central-1'}
  runtime: nodejs14.x

  stackPolicy:
    - Effect: Allow
      Principal: '*'
      Action: 'Update:*'
      Resource: '*'
    - Effect: Deny
      Principal: '*'
      Action:
        - Update:Replace
        - Update:Delete
      ResourceType:
        # Prevents unintentional DDB data loss
        - AWS::DynamoDB::Table

  # TODO: each Lambda function should have its own IAM policy to adhere to principle of least privilege
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt:
              - UsersTable
              - Arn

plugins:
  - serverless-api-tester
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies
  - serverless-prune-plugin
  - serverless-stack-policy-by-resource-type

custom:
  prune:
    automatic: true
    number: 3

functions:
  api:
    handler: src/api.handler
    events:
      - httpApi: '*'
    environment:
      USERS_TABLE:
        Ref: UsersTable

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          # userId
          - AttributeName: u
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: u
            KeyType: HASH
        # Example only, so TTL items to keep costs down
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    # TODO: CloudWatch alarms for API Lambda function:
    # - # of errors depending on error tolerance rate
    # - Concurrency limits
    # - Duration thresholds
    #   - Cold start time might be interesting later on
